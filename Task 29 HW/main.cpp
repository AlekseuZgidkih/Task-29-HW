#include "FineGrainedQueue.h"

int main()
{
    FineGrainedQueue q;

    /*
    Чтобы не переусложнять реализацию, предполагается следующее:
    *очередь не пустая,
    *вставляется элемент в середину или конец списка, то есть вставку в начало списка не нужно рассматривать,
    *если pos больше длины списка, то нужно вставить элемент в конец списка.
    */

    // 1 делаем очередь не пустой, заполняем список
    q.push_front(0);
    q.push_back(1);
    q.push_back(2);
    q.push_back(3);
    q.push_back(4);
    q.push_back(5);
    q.push_back(6);
    q.push_back(7);
    q.push_back(8);
    q.push_back(9);
    std::cout << "before:\t";
    q.show();

    // 2. пробуем делать операции которые могут вызвать гонку данных.

    /* вставка двух элементов в одну и ту же позицию */
    /* при отсутствии гонки начало списка будет иметь вид: 0 - 222 - 111 - 1 */
    std::thread t1([&q]()
        { q.insertIntoMiddle(1, 111); });
    std::thread t2([&q]()
        { q.insertIntoMiddle(1, 222); });

    /* одновременное удаление и вставка в одних и тех же позициях. */
    /* При отсутствии гонки данных: узлы со значениями 3 и 4 удалены, на их месте новые узлы со значениями 333 и 444 */
    /* Без гонки эта область списка будет иметь вид 2 - 444 - 333 - 5 */
    std::thread t3del([&q]()
        { q.remove(3); });
    // первые два потока сместили тройку и четверку в 5 позицию.
    std::thread t3([&q]()
        { q.insertIntoMiddle(5, 333); });
    std::thread t4del([&q]()
        { q.remove(4); });
    std::thread t4([&q]()
        { q.insertIntoMiddle(5, 444); });

    /* эти потоки должны занять два новых последних места в списке. Позиция превышает длину списка. */
    /* эта область списка будет иметь вид 9 - 555 - 666 */
    std::thread t5([&q]()
        { q.insertIntoMiddle(222, 555); });
    std::thread t6([&q]()
        { q.insertIntoMiddle(222, 666); });
    t1.join();
    t2.join();
    t3.join();
    t3del.join();
    t4del.join();
    t4.join();
    t5.join();
    t6.join();

    // печать списка
    // без гонки данных должен быть таким
    // 0 -> 222 -> 111 -> 1 -> 2 -> 444 -> 333 -> 5 -> 6 -> 7 -> 8 -> 9 -> 555 -> 666
    std::cout << "after:\t";
    q.show();
    return 0;
}